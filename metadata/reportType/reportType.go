package reportType

import (
	"encoding/xml"

	. "github.com/ForceCLI/force-md/general"
	"github.com/ForceCLI/force-md/internal"
	"github.com/ForceCLI/force-md/metadata"
)

const NAME = "ReportType"

func init() {
	internal.TypeRegistry.Register(NAME, func(path string) (metadata.RegisterableMetadata, error) { return Open(path) })
}

type Field struct {
	CheckedByDefault    BooleanText `xml:"checkedByDefault"`
	DisplayNameOverride *struct {
		Text string `xml:",chardata"`
	} `xml:"displayNameOverride"`
	Field string `xml:"field"`
	Table string `xml:"table"`
}

type Section struct {
	Columns     FieldList `xml:"columns"`
	MasterLabel string    `xml:"masterLabel"`
}

type FieldList []Field

type ReportType struct {
	metadata.MetadataInfo
	XMLName    xml.Name `xml:"ReportType"`
	Xmlns      string   `xml:"xmlns,attr"`
	BaseObject struct {
		Text string `xml:",chardata"`
	} `xml:"baseObject"`
	Category struct {
		Text string `xml:",chardata"`
	} `xml:"category"`
	Deployed struct {
		Text string `xml:",chardata"`
	} `xml:"deployed"`
	Description struct {
		Text string `xml:",chardata"`
	} `xml:"description"`
	Join *struct {
		Join *struct {
			Join *struct {
				OuterJoin struct {
					Text string `xml:",chardata"`
				} `xml:"outerJoin"`
				Relationship struct {
					Text string `xml:",chardata"`
				} `xml:"relationship"`
			} `xml:"join"`
			OuterJoin struct {
				Text string `xml:",chardata"`
			} `xml:"outerJoin"`
			Relationship struct {
				Text string `xml:",chardata"`
			} `xml:"relationship"`
		} `xml:"join"`
		OuterJoin struct {
			Text string `xml:",chardata"`
		} `xml:"outerJoin"`
		Relationship struct {
			Text string `xml:",chardata"`
		} `xml:"relationship"`
	} `xml:"join"`
	Label struct {
		Text string `xml:",chardata"`
	} `xml:"label"`
	Sections      []Section `xml:"sections"`
	Autogenerated *struct {
		Text string `xml:",chardata"`
	} `xml:"autogenerated"`
}

func (c *ReportType) SetMetadata(m metadata.MetadataInfo) {
	c.MetadataInfo = m
}

func (c *ReportType) Type() metadata.MetadataType {
	return NAME
}

func Open(path string) (*ReportType, error) {
	p := &ReportType{}
	return p, metadata.ParseMetadataXml(p, path)
}
